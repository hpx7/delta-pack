import { Writer as _Writer, Reader as _Reader } from "bin-serde";

const _NO_DIFF = Symbol("NODIFF");
type _DeepPartial<T> = T extends string | number | boolean | undefined
  ? T
  : T extends Array<infer ArrayType>
  ? Array<_DeepPartial<ArrayType> | typeof _NO_DIFF> | typeof _NO_DIFF
  : T extends { type: string; val: any }
  ? { type: T["type"]; val: _DeepPartial<T["val"] | typeof _NO_DIFF> }
  : { [K in keyof T]: _DeepPartial<T[K]> | typeof _NO_DIFF };

class _Tracker {
  constructor(private bits: boolean[] = [], private idx = 0) {}
  push(val: boolean) {
    this.bits.push(val);
  }
  next() {
    return this.bits[this.idx++];
  }
}

{{#each this}}
{{> renderExportArg}}
{{/each}}

{{#each this}}
{{> renderTypeValue}}
{{/each}}

{{#*inline "renderExportArg"}}
{{#if (eq type "enum")}}
export enum {{@key}} {
  {{#each options}}
  {{this}},
  {{/each}}
}
{{else}}
export type {{@key}} = {{> renderTypeArg}};
{{/if}}
{{/inline}}
{{#*inline "renderTypeArg"}}
{{#if (eq type "reference")}}
{{reference}}
{{~else if (eq type "object")}}
{
  {{#each properties}}
  {{@key}}{{#if (eq modifier "optional")}}?{{/if}}: {{> renderTypeArg}}{{#if (eq modifier "array")}}[]{{/if}};
  {{/each}}
}
{{~else if (eq type "union")}}
{{#each options}}{{#unless @first}} | {{/unless}}{ type: "{{> renderTypeArg}}"; val: {{> renderTypeArg}} }{{/each}}
{{~else if (eq type "int")}}
number
{{~else if (eq type "float")}}
number
{{~else if (eq type "string")}}
string
{{~else if (eq type "boolean")}}
boolean
{{~/if}}
{{~/inline}}
{{#*inline "renderTypeValue"}}
{{#if (eq type "object")}}
export const {{@key}} = {
  default(): {{@key}} {
    return {
      {{#each properties}}
      {{@key}}: {{> renderDefault}},
      {{/each}}
    };
  },
  validate(obj: {{@key}}) {
    if (typeof obj !== "object") {
      return [`Invalid {{@key}} object: ${obj}`]
    }
    let validationErrors: string[];

    {{#each properties}}
    validationErrors = {{> renderValidate arg=@key}};
    if (validationErrors.length > 0) {
      return validationErrors.concat("Invalid key: {{@../key}}.{{@key}}");
    }
    {{/each}}

    return validationErrors;
  },
  encode(obj: {{@key}}, buf: _Writer) {
    {{#each properties}}
    {{> renderEncodeArg arg=@key}};
    {{/each}}
    return buf;
  },
  encodeDiff(obj: _DeepPartial<{{@key}}>, tracker: _Tracker, buf: _Writer) {
    {{#each properties}}
    tracker.push(obj.{{@key}} !== _NO_DIFF);
    if (obj.{{@key}} !== _NO_DIFF) {
      {{> renderEncodeDiffArg arg=@key}};
    }
    {{/each}}
    return buf;
  },
  decode(buf: _Reader): {{@key}} {
    const sb = buf;
    return {
      {{#each properties}}
      {{@key}}: {{> renderDecodeArg}},
      {{/each}}
    };
  },
  decodeDiff(buf: _Reader, tracker: _Tracker): _DeepPartial<{{@key}}> {
    const sb = buf;
    return {
      {{#each properties}}
      {{@key}}: tracker.next() ? {{> renderDecodeDiffArg}} : _NO_DIFF,
      {{/each}}
    };
  },
};
{{else if (eq type "union")}}
export const {{@key}} = {
  default(): {{@key}} {
    return {
      {{#each options}}
      {{#if @first}}
      type: "{{reference}}",
      val: {{> renderDefault}},
      {{/if}}
      {{/each}}
    };
  },
  values() {
    return [{{#each options}}"{{reference}}"{{#unless @last}}, {{/unless}}{{/each}}];
  },
  validate(obj: {{@key}}) {
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{reference}}") {
      const validationErrors = {{> renderValidate arg="val"}};
      if (validationErrors.length > 0) {
        return validationErrors.concat("Invalid union: {{@../key}}");
      }
      return validationErrors;
    }
    {{/each}}
    else {
      return [`Invalid {{@key}} union: ${obj}`];
    }
  },
  encode(obj: {{@key}}, writer?: _Writer) {
    const buf = writer ?? new _Writer();
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{reference}}") {
      writeUInt8(buf, {{@index}});
      const x = obj.val;
      {{> renderEncodeArg}};
    }
    {{/each}}
    return buf;
  },
  encodeDiff(obj: _DeepPartial<{{@key}}>, tracker: _Tracker, buf: _Writer) {
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (obj.type === "{{reference}}") {
      writeUInt8(buf, {{@index}});
      writeBoolean(buf, obj.val !== _NO_DIFF);
      if (obj.val !== _NO_DIFF) {
        const x = obj.val;
        {{> renderEncodeDiffArg}};
      }
    }
    {{/each}}
    return buf;
  },
  decode(sb: _Reader): {{@key}} {
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{reference}}", val: {{> renderDecodeArg}} };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
  decodeDiff(sb: _Reader, tracker: _Tracker): _DeepPartial<{{@key}}> {
    const type = parseUInt8(sb);
    {{#each options}}
    {{#unless @first}}else {{/unless}}if (type === {{@index}}) {
      return { type: "{{reference}}", val: parseBoolean(sb) ? {{> renderDecodeDiffArg}} : _NO_DIFF };
    }
    {{/each}}
    throw new Error("Invalid union");
  },
}
{{/if}}
{{/inline}}
{{#*inline "renderDefault"}}
{{#if (eq type "reference")}}
{{#if (eq modifier "array")}}
[]
{{~else if (eq modifier "optional")}}
undefined
{{~else}}
{{> renderDefault (lookup @root reference)}}
{{/if}}
{{~else if (eq type "string")}}
""
{{~else if (eq type "int")}}
0
{{~else if (eq type "float")}}
0.0
{{~else if (eq type "boolean")}}
false
{{~else if (eq type "enum")}}
0
{{/if}}
{{/inline}}
{{#*inline "renderValidate"}}
{{#if (eq type "reference")}}
{{#if (eq modifier "array")}}
validateArray({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderValidate (lookup @root reference) typeString=reference}})
{{~else if (eq modifier "optional")}}
validateOptional({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderValidate (lookup @root reference) typeString=reference}})
{{~else}}
{{> renderValidate (lookup @root reference) arg=arg typeString=reference typeString=reference}}
{{/if}}
{{~else if (eq type "int")}}
validatePrimitive(Number.isInteger({{#if arg}}obj.{{arg}}{{else}}x{{/if}}), `Invalid {{typeString}}: ${ {{#if arg}}obj.{{arg}}{{else}}x{{/if}} }`)
{{~else if (eq type "float")}}
validatePrimitive(typeof {{#if arg}}obj.{{arg}}{{else}}x{{/if}} === "number", `Invalid {{typeString}}: ${ {{#if arg}}obj.{{arg}}{{else}}x{{/if}} }`)
{{~else if (eq type "string")}}
validatePrimitive(typeof {{#if arg}}obj.{{arg}}{{else}}x{{/if}} === "string", `Invalid {{typeString}}: ${ {{#if arg}}obj.{{arg}}{{else}}x{{/if}} }`)
{{~else if (eq type "enum")}}
validatePrimitive({{#if arg}}obj.{{arg}}{{else}}x{{/if}} in {{typeString}}, `Invalid {{typeString}}: ${ {{#if arg}}obj.{{arg}}{{else}}x{{/if}} }`)
{{~else if (eq type "boolean")}}
validatePrimitive(typeof {{#if arg}}obj.{{arg}}{{else}}x{{/if}} === "boolean", `Invalid {{typeString}}: ${ {{#if arg}}obj.{{arg}}{{else}}x{{/if}} }`)
{{~else if (eq type "object")}}
{{typeString}}.validate({{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "union")}}
{{typeString}}.validate({{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~/if}}
{{/inline}}
{{#*inline "renderEncodeArg"}}
{{#if (eq type "reference")}}
{{#if (eq modifier "array")}}
writeArray(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderEncodeArg (lookup @root reference) typeString=reference}})
{{~else if (eq modifier "optional")}}
writeOptional(buf, obj.{{arg}}, (x) => {{> renderEncodeArg (lookup @root reference) typeString=reference}})
{{~else}}
{{> renderEncodeArg (lookup @root reference) arg=arg typeString=reference}}
{{/if}}
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else}}
{{typeString}}.encode({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, buf)
{{~/if}}
{{/inline}}
{{#*inline "renderEncodeDiffArg"}}
{{#if (eq type "reference")}}
{{#if (eq modifier "array")}}
writeArrayDiff(buf, tracker, {{#if arg}}obj.{{arg}}{{else}}x{{/if}}, (x) => {{> renderEncodeDiffArg (lookup @root reference) typeString=reference}})
{{~else if (eq modifier "optional")}}
writeOptional(buf, obj.{{arg}}, (x) => {{> renderEncodeDiffArg (lookup @root reference) typeString=reference}})
{{~else}}
{{> renderEncodeDiffArg (lookup @root reference) arg=arg typeString=reference}}
{{/if}}
{{~else if (eq type "enum")}}
writeUInt8(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "int")}}
writeInt(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "float")}}
writeFloat(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "string")}}
writeString(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else if (eq type "boolean")}}
writeBoolean(buf, {{#if arg}}obj.{{arg}}{{else}}x{{/if}})
{{~else}}
{{typeString}}.encodeDiff({{#if arg}}obj.{{arg}}{{else}}x{{/if}}, tracker, buf)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeArg"}}
{{#if (eq type "reference")}}
{{#if (eq modifier "array")}}
parseArray(sb, () => {{> renderDecodeArg (lookup @root reference) typeString=reference}})
{{~else if (eq modifier "optional")}}
parseOptional(sb, () => {{> renderDecodeArg (lookup @root reference) typeString=reference}})
{{~else}}
{{> renderDecodeArg (lookup @root reference) arg=arg typeString=reference}}
{{/if}}
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else}}
{{typeString}}.decode(sb)
{{~/if}}
{{/inline}}
{{#*inline "renderDecodeDiffArg"}}
{{#if (eq type "reference")}}
{{#if (eq modifier "array")}}
parseArrayDiff(sb, tracker, () => {{> renderDecodeDiffArg (lookup @root reference) typeString=reference}})
{{~else if (eq modifier "optional")}}
parseOptional(sb, () => {{> renderDecodeDiffArg (lookup @root reference) typeString=reference}})
{{~else}}
{{> renderDecodeDiffArg (lookup @root reference) arg=arg typeString=reference}}
{{/if}}
{{~else if (eq type "enum")}}
parseUInt8(sb)
{{~else if (eq type "int")}}
parseInt(sb)
{{~else if (eq type "float")}}
parseFloat(sb)
{{~else if (eq type "string")}}
parseString(sb)
{{~else if (eq type "boolean")}}
parseBoolean(sb)
{{~else}}
{{typeString}}.decodeDiff(sb, tracker)
{{~/if}}
{{/inline}}
function validatePrimitive(isValid: boolean, errorMessage: string) {
  return isValid ? [] : [errorMessage];
}
function validateOptional<T>(val: T | undefined, innerValidate: (x: T) => string[]) {
  if (val !== undefined) {
    return innerValidate(val);
  }
  return [];
}
function validateArray<T>(arr: T[], innerValidate: (x: T) => string[]) {
  if (!Array.isArray(arr)) {
    return ["Invalid array: " + arr];
  }
  for (let i = 0; i < arr.length; i++) {
    const validationErrors = innerValidate(arr[i]);
    if (validationErrors.length > 0) {
      return validationErrors.concat("Invalid array item at index " + i);
    }
  }
  return [];
}

function writeUInt8(buf: _Writer, x: number) {
  buf.writeUInt8(x);
}
function writeBoolean(buf: _Writer, x: boolean) {
  buf.writeUInt8(x ? 1 : 0);
}
function writeInt(buf: _Writer, x: number) {
  buf.writeVarint(x);
}
function writeFloat(buf: _Writer, x: number) {
  buf.writeFloat(x);
}
function writeString(buf: _Writer, x: string) {
  buf.writeString(x);
}
function writeOptional<T>(buf: _Writer, x: T | undefined, innerWrite: (x: T) => void) {
  writeBoolean(buf, x !== undefined);
  if (x !== undefined) {
    innerWrite(x);
  }
}
function writeArray<T>(buf: _Writer, x: T[], innerWrite: (x: T) => void) {
  buf.writeUVarint(x.length);
  for (const val of x) {
    innerWrite(val);
  }
}
function writeArrayDiff<T>(buf: _Writer, tracker: _Tracker, x: (T | typeof _NO_DIFF)[], innerWrite: (x: T) => void) {
  buf.writeUVarint(x.length);
  x.forEach((val) => {
    tracker.push(val !== _NO_DIFF);
    if (val !== _NO_DIFF) {
      innerWrite(val);
    }
  });
}

function parseUInt8(buf: _Reader): number {
  return buf.readUInt8();
}
function parseBoolean(buf: _Reader): boolean {
  return buf.readUInt8() > 0;
}
function parseInt(buf: _Reader): number {
  return buf.readVarint();
}
function parseFloat(buf: _Reader): number {
  return buf.readFloat();
}
function parseString(buf: _Reader): string {
  return buf.readString();
}
function parseOptional<T>(buf: _Reader, innerParse: (buf: _Reader) => T): T | undefined {
  return parseBoolean(buf) ? innerParse(buf) : undefined;
}
function parseArray<T>(buf: _Reader, innerParse: () => T): T[] {
  const len = buf.readUVarint();
  const arr: T[] = [];
  for (let i = 0; i < len; i++) {
    arr.push(innerParse());
  }
  return arr;
}
function parseArrayDiff<T>(buf: _Reader, tracker: _Tracker, innerParse: () => T): (T | typeof _NO_DIFF)[] {
  const len = buf.readUVarint();
  const arr: (T | typeof _NO_DIFF)[] = [];
  for (let i = 0; i < len; i++) {
    arr.push(tracker.next() ? innerParse() : _NO_DIFF);
  }
  return arr;
}
